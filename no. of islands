class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty()) return 0;
        int m = grid.size();
        int n = grid[0].size();
        int count = 0;

        vector<int> dirX = {-1, 1, 0, 0};
        vector<int> dirY = {0, 0, -1, 1};

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    grid[i][j] = '0'; 
                    queue<pair<int,int>> q;
                    q.push({i,j});

                    while (!q.empty()) {
                        auto [x, y] = q.front();
                        q.pop();

                        // explore 4 directions
                        for (int k = 0; k < 4; k++) {
                            int nx = x + dirX[k];
                            int ny = y + dirY[k];

                            if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == '1') {
                                q.push({nx, ny});
                                grid[nx][ny] = '0'; 
                            }
                        }
                    }
                }
            }
        }

        return count;
    }
};
